1. JavaScript Map  --  Array.prototype.map()
    The map() method creates a new array with the results of calling a provided function on every element in this array.
    var arr = [1,2,3,4,5,6,7,8];
    var newArray = arr.map(function(value, index){
        if(value%2===0){ 
          return value; 
        } 
    });
    newArray will have array of even numbers from the arr.
    Note : This will also return undefined when the function does not return anything. 
    Src : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map
    
2. JavaScript Sort - Array.prototype.sort()
    Src : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
    According to MDN, 
    var fruit = ['cherries', 'apples', 'bananas'];
    fruit.sort(); // ['apples', 'bananas', 'cherries']

    var scores = [1, 10, 2, 21]; 
    scores.sort(); // [1, 10, 2, 21]
    // Watch out that 10 comes before 2,
    // because '10' comes before '2' in Unicode code point order.
    
    var things = ['word', 'Word', '1 Word', '2 Words'];
    things.sort(); // ['1 Word', '2 Words', 'Word', 'word']
    // In Unicode, numbers come before upper case letters,
    // which come before lower case letters.
    
    If compareFunction is supplied, the array elements are sorted according to the return value of the compare function. If a and b are two elements being compared, then:
    If compareFunction(a, b) is less than 0, sort a to a lower index than b, i.e. a comes first.
    If compareFunction(a, b) returns 0, leave a and b unchanged with respect to each other, but sorted with respect to all different elements. Note: the ECMAscript standard does not guarantee this behaviour, and thus not all browsers (e.g. Mozilla versions dating back to at least 2003) respect this.
    If compareFunction(a, b) is greater than 0, sort b to a lower index than a.
    compareFunction(a, b) must always return the same value when given a specific pair of elements a and b as its two arguments. If inconsistent results are returned then the sort order is undefined.
    So, the compare function has the following form:
    
    function compare(a, b) {
      if (a is less than b by some ordering criterion) {
        return -1;
      }
      if (a is greater than b by the ordering criterion) {
        return 1;
      }
      // a must be equal to b
      return 0;
    }
    To compare numbers instead of strings, the compare function can simply subtract b from a. The following function will sort the array ascending:
    
    function compareNumbers(a, b) {
      return a - b;
    }
    The sort method can be conveniently used with function expressions (and closures):
    
    var numbers = [4, 2, 5, 1, 3];
    numbers.sort(function(a, b) {
      return a - b;
    });
    console.log(numbers);
    
    // [1, 2, 3, 4, 5]
    Objects can be sorted given the value of one of their properties.
    
    var items = [
      { name: 'Edward', value: 21 },
      { name: 'Sharpe', value: 37 },
      { name: 'And', value: 45 },
      { name: 'The', value: -12 },
      { name: 'Magnetic' },
      { name: 'Zeros', value: 37 }
    ];
    items.sort(function (a, b) {
      if (a.value > b.value) {
        return 1;
      }
      if (a.value < b.value) {
        return -1;
      }
      // a must be equal to b
      return 0;
    });

    
